## * The default configuration of stacktrace grouping enhancers

# iOS known apps
family:native package:/var/containers/Bundle/Application/**          +app
family:native package:/private/var/containers/Bundle/Application/**  +app

# iOS apps in simulator
family:native package:**/Developer/CoreSimulator/Devices/**          +app
family:native package:**/Containers/Bundle/Application/**            +app

# known well locations for unix paths
family:native package:/lib/**                                        -app
family:native package:/usr/lib/**                                    -app
family:native path:/usr/local/lib/**                                 -app
family:native path:/usr/local/Cellar/**                              -app
family:native package:linux-gate.so*                                 -app

# well known path components for mac paths
family:native package:**.app/Contents/**                             +app
family:native package:/Users/**                                      +app

# rust common modules
family:native function:std::*                                     -app
family:native function:core::*                                    -app
family:native function:alloc::*                                   -app
family:native function:__rust_*                                   -app

# rust borders
family:native function:std::panicking::begin_panic                ^-group -group ^-app -app
family:native function:core::panicking::begin_panic               ^-group -group ^-app -app
family:native function:failure::backtrace::Backtrace::new         ^-group -group ^-app -app
family:native function:error_chain::make_backtrace                ^-group -group ^-app -app

# C++ borders
family:native function:_CxxThrowException                         ^-group -group ^-app -app
family:native function:__cxa_throw                                ^-group -group ^-app -app
family:native function:__assert_rtn                               ^-group -group ^-app -app

# Objective-C
family:native function:_NSRaiseError                              ^-group -group ^-app -app
family:native function:_mh_execute_header                         -group -app

# Breakpad
family:native function:google_breakpad::*                         -app -group
family:native function:google_breakpad::ExceptionHandler::SignalHandler ^-group -group
family:native function:google_breakpad::ExceptionHandler::WriteMinidumpWithException ^-group -group

# Support frameworks that are not in-app
family:native package:**/Frameworks/libswift*.dylib                  -app
family:native package:**/Frameworks/KSCrash.framework/**             -app
family:native package:**/Frameworks/SentrySwift.framework/**         -app
family:native package:**/Frameworks/Sentry.framework/**              -app

# Needed for versions < sentry-cocoa 7.0.0 and static linking.
# Before sentry-cocoa 7.0.0, we marked all packages located inside the application bundle as inApp.
# Since 7.0.0, the Cocoa SKD only marks the main executable as inApp. This change doesn't impact
# applications using static libraries, as when using static libraries, all of them end up in the
# main executable.
family:native function:kscm_*                                     -app -group
family:native function:sentrycrashcm_*                            -app -group
family:native function:kscrash_*                                  -app -group
family:native function:sentrycrash_*                              -app -group
family:native function:"?[[]KSCrash*"                             -app -group
family:native function:"?[[]RNSentry*"                            -app -group

# Projects shipping their own class called "SentryFoo" can then easily override this in their
# own grouping enhancers.
family:native function:"?[[]Sentry*"                              -app -group

# Android ANR: Exception stack is a snapshot of the UI/main thread. The
# *outermost* in-app frame is most indicative of which user action has led to ANR,
# and that's what we want to group by. (innermost=crashing frame)
#
# Note: Newer Android SDKs send the snapshot flag with ANRs, so this rule is
# not strictly necessary.
error.mechanism:ANR invert-stacktrace=1

# NSError iOS: Stacktrace is a thread snapshot as well.
# Note: Newer iOS SDK sends snapshot flag, so this is not strictly necessary.
error.mechanism:NSError invert-stacktrace=1

# Categorization of frames
family:native package:"/System/Library/Frameworks/**" category=system
family:native package:"C:/Windows/**" category=system
family:native package:/usr/lib/** category=system
family:native function:memset category=system
family:native function:memcmp category=system

family:native function:boost::* category=std
family:native function:std::* category=std

family:native package:/usr/lib/system/** function:start category=threadbase
family:native function:wWinMain category=threadbase
family:native function:invoke_main category=threadbase
family:native function:BaseThreadInitThunk category=threadbase
family:native function:RtlUserThreadStart category=threadbase
family:native function:thread_start category=threadbase
family:native function:_pthread_start category=threadbase
family:native function:_pthread_body category=threadbase
family:native function:_dispatch_worker_thread2 category=threadbase
family:native function:_dispatch_client_callout category=threadbase
family:native function:start_wqthread category=threadbase
family:native function:_pthread_wqthread category=threadbase
family:native function:boost::*::thread_proxy category=threadbase

family:native package:/usr/lib/system/libsystem_malloc.dylib category=malloc
family:native function:malloc category=malloc
family:native function:malloc_report category=oom
family:native function:malloc_vreport category=oom
family:native function:malloc_base category=malloc
family:native function:RtlpAllocateHeapInternal category=malloc
family:native function:std::*::allocator_traits* category=malloc

family:native function:*::operator()* category=indirection
family:native function:*<lambda>* category=indirection
family:native function:destructor' category=indirection
family:native function:__dynamic_cast category=indirection
family:native function:_purecall category=indirection

family:native function:"*::\{dtor\}" category=dtor

family:native function:exit category=shutdown
family:native function:RtlExitUserProcess category=shutdown
family:native function:ExitProcessImplementation category=shutdown
family:native function:RtlExitUserThread category=shutdown

family:native function:RtlpExecuteHandlerForException category=handler
family:native function:_sigtramp category=handler
family:native function:DispatchHookW category=handler
family:native function:execute_onexit_table category=handler

family:native function:abort category=throw
family:native function:raise category=throw
family:native function:std::terminate category=throw
family:native function:RtlExitUserThread category=throw
family:native function:TppRaiseInvalidParameter category=throw
family:native function:_CxxThrowException category=throw
family:native function:RaiseException category=throw
family:native function:RaiseComPlusException category=throw

family:native package:"C:/WINDOWS/system32/DriverStore\**" category=driver
family:native package:"/System/Library/Extensions/AppleIntel*GraphicsGLDriver.bundle/**" category=driver
family:native function:*CUDA* category=driver
family:native package:**/nvcuda.dll category=driver
family:native package:"C:\Program Files\NVIDIA Corporation\**" category=driver
family:native package:/System/Library/Extensions/GeForceGLDriver.bundle/** category=driver
family:native package:/System/Library/Extensions/AMDRadeon*/** category=driver
family:native package:/System/Library/PrivateFrameworks/GPUSupport.framework/** category=driver

# If there is a singular frame wedged between two driver frames, consider it a driver frame
# TODO
# [ category:driver | .. | category:driver ] category:system category=driver
# [ category:driver | .. | category:driver ] category:malloc category=driver

family:native function:RtlFreeHeap category=free
family:native function:RtlFreeUnicodeString category=free
family:native function:std::_Deallocate category=free
family:native category:system function:free category=free

family:native package:C:\Windows\SYSTEM32\OPENGL32.dll category=gl
family:native package:/System/Library/Frameworks/OpenGL.framework/** category=gl

family:native package:"/System/Library/PrivateFrameworks/GPUSupport.framework/**" function:gpusGenerateCrashLog* category=telemetry
family:native function:gpusKillClientExt category=telemetry

family:native function:dlopen category=dyld

family:native function:pthread_mutex_lock category=lock

# System frame wedged between two other frames is just noise.
[ !category:system | .. | !category:system ] category:system -group

# Semi-interesting frames
category:driver +sentinel +prefix
category:free +sentinel +prefix
category:lock +sentinel +prefix
category:dyld +sentinel +prefix
category:gl +sentinel

# Ignore driver frame if it is directly calling another driver frame. This
# removes a lot of noise from the stack especially if most of the called frames
# failed symbolication, stack scanning was done or to paper over differences in
# driver versions.
[ category:driver | .. ] category:driver -group

# Only group by top-level GL operaton, not any helper functions it may have called.
[ .. | category:gl ] category:gl -group

# Not very interesting frames -- better add the next frame too
# category:system +prefix
# TODO: consider -group
category:indirection +prefix

# abort() and exception raising is technically the culprit for crashes, but not
# the thing we want to show.
category:throw +sentinel +prefix ^-group

# Thread bases such as `main()` are just noise and are called by noise.
category:threadbase -group v-group

# handler frames typically call code for crash reporting, so the frames below
# are noise and do not represent the actual crash. We usually expect something to
# be above handler frames that represents the actual crash. The stackwalker
# has a bug where it cannot walk past _sigtramp on OS X but that is expected to
# be fixed eventually.
category:handler ^-group -group

# Crash reporting tools are noise that can occur outside of signal handlers
# too, apparently (Apple's GPUSupport module)
category:telemetry -group

# category:indirection -group
# category:threadbase v-group
